[project]
name = "hex-toolkit"
version = "0.6.0"
description = "A comprehensive toolkit for working with Hex: SDK, CLI, and MCP integration"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Franccesco Orozco", email = "franccesco@codingdose.info" }]
license = { text = "MIT" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "httpx>=0.25.0",
  "pydantic>=2.0",
  "python-dateutil>=2.8.2",
  "typing-extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.11.0",
  "ruff>=0.1.0",
  "pre-commit>=3.3.0",
  "jsonschema>=4.0.0",
]
cli = ["typer>=0.9.0", "rich>=13.5.0"]
mcp = ["fastmcp>=1.0.0"]
all = ["typer>=0.9.0", "rich>=13.5.0", "fastmcp>=1.0.0"]

[project.scripts]
hex = "hex_toolkit.cli:app"
hex-toolkit = "hex_toolkit.cli:app"

[project.urls]
Homepage = "https://github.com/franccesco/hex-toolkit"
Documentation = "https://hex-toolkit.readthedocs.io"
Repository = "https://github.com/franccesco/hex-toolkit"
Issues = "https://github.com/franccesco/hex-toolkit/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs", "/tests", "/examples"]

[tool.hatch.build.targets.wheel]
packages = ["src/hex_toolkit"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--verbose",
  "-m",
  "not integration",  # Skip integration tests by default
]
markers = [
  "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.ruff]
line-length = 88
target-version = "py310"
preview = true

[tool.ruff.lint]
select = [
  "E",    # pycodestyle — hard PEP 8 violations (indentation, spacing, etc.).
  "W",    # pycodestyle warnings — softer style nits you still want fixed.
  "F",    # pyflakes — real code errors: undefined names, unused vars & imports.
  "I",    # isort — keep your import blocks deterministically sorted/grouped.
  "B",    # bugbear — likely bugs and nasty edge-cases (mutable defaults, etc.).
  "C4",   # comprehensions — suggest faster/cleaner list- & dict-comps.
  "UP",   # pyupgrade — auto-rewrite code to the newest-supported Python syntax.
  "C901", # mccabe — flag functions whose cyclomatic complexity balloons.
  "SIM",  # simplify — call out over-engineered constructs; prefer the obvious one-liner.
  "N",    # pep8-naming — enforce PEP 8 names for classes, funcs, vars, etc.
  "RUF",  # Ruff-native extras — Ruff-only correctness/perf rules (a la "unicorn").
  "FAST", # fastapi — idiomatic FastAPI patterns and anti-pattern detection.
  "DOC",  # pydoclint — Google/Numpy docstring section order & completeness.
  "D",    # pydocstyle — PEP 257 docstring formatting conformance.
  "ARG",  # unused-arguments — catch never-used *args/**kwargs/params.
  "PERF", # perflint — flag obvious performance foot-guns (e.g., `list()` in loops).
]
ignore = [
  "E501",  # line too long (handled by formatter)
  "B008",  # do not perform function calls in argument defaults
  "B905",  # strict= parameter of zip
  "RUF029", # async functions without await (required by MCP framework)
  "D203",  # one-blank-line-before-class (incompatible with D211)
  "D213",  # multi-line-summary-second-line (incompatible with D212)
]

[tool.ruff.lint.mccabe]
# Maximum complexity allowed (default is 10)
max-complexity = 10

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces (same as Black default)
indent-style = "space"
# Preserve quotes in type annotations
skip-magic-trailing-comma = false
# Line ending style
line-ending = "auto"

[tool.pyright]
pythonVersion = "3.10"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportPrivateUsage = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUntypedFunctionDecorator = false
reportUntypedClassDecorator = false
reportUntypedBaseClass = false
exclude = [
  "**/node_modules",
  "**/__pycache__",
  ".git",
  ".venv",
  "dist",
  "build",
]

# Test-specific overrides
extraPaths = ["tests"]

[[tool.pyright.executionEnvironments]]
root = "tests"
reportFunctionMemberAccess = false
reportAttributeAccessIssue = false
reportIndexIssue = false
reportUnknownParameterType = false
reportMissingParameterType = false
reportUnknownArgumentType = false
reportMissingTypeArgument = false

[[tool.pyright.executionEnvironments]]
root = "src/hex_toolkit/mcp"
reportCallIssue = false
reportAttributeAccessIssue = false

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[dependency-groups]
dev = ["pyright>=1.1.402"]
